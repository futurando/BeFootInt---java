<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	          http://www.springframework.org/schema/jdbc
              http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
              http://www.springframework.org/schema/context
              http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- Infrastructure configuration to support system testing the rewards 
		application. These beans are defined in a separate file to isolate infrastructure 
		config from application config, as infrastructure often varies between environments. 
		For example, in a test environment you might use a lightweight in-memory 
		DataSource, while in production you connect to a database server with a connection 
		pool. -->
	<!-- Configuration to support system testing the rewards application -->
	
	<!-- Import the application config -->
	<import resource="classpath:spring/application-config.xml"/>

	<!-- Replaces ${placeholders} with values in testdb.properties -->
	<context:property-placeholder
		location="classpath:testdb/testdb.properties" />

	<!-- Creates an in-memory "rewards" database populated with test data for 
		fast testing -->
	<jdbc:embedded-database id="dataSource">
		<jdbc:script location="${schemaLocation}" />
		<jdbc:script location="${testDataLocation}" />
	</jdbc:embedded-database>
	
		<!-- A Hibernate SessionFactory for mapping Accounts and Restaurants from object to relation tables -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="annotatedClasses">
			<list>
				<value>be.befootint.consulttweets.model.application.TinyTweet</value>
				<value>be.befootint.consulttweets.model.application.Lists</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<value>
				hibernate.format_sql=true
				hibernate.show_sql=true
			</value>
		</property>
	</bean>
	
	<!-- A transaction manager for working with Hibernate SessionFactories -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

</beans>
